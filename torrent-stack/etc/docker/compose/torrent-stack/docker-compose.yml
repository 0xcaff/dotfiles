version: '3.4'

# TODO:
# * Automatically find best NordVPN Server and connect to it.
#
#   https://nordvpn.com/api/server
#   https://nordvpn.com/api/server/stats
#   https://nordvpn.com/servers/#recommended

services:
  # This container sets up a firewall which only allows traffic to the docker
  # network and the specified destination (ip, port protocol). See its repo for
  # more information: https://github.com/0xcaff/docker-simple-firewall
  firewall:
    image: quay.io/0xcaff/simple-firewall:latest
    cap_add:
      - net_admin
    env_file:
      - ./vpn/environment.env
    environment:
      ALLOW_PORT: 1194
      ALLOW_PROTO: udp

      # TCP connections will be accepted at this port once the firewall is
      # configured.
      FIREWALL_READY_SIGNAL_PORT: 60000

    # The only traffic allowed out of this container is traffic to this network
    # and traffic to the specified ip address.
    networks:
      - local

  # A service which creates an openvpn tunnel.
  vpn:
    image: quay.io/0xcaff/openvpn-client:latest
    cap_add:
      - net_admin
    devices:
      - /dev/net/tun

    network_mode: service:firewall

    volumes:
      - ./wait-for/wait-for:/wait-for
      - ./vpn/conf.ovpn:/vpn/config/config.ovpn
      - ./vpn/creds.txt:/vpn/config/creds.txt

    command: "/wait-for localhost:60000 -- openvpn --config /vpn/config/config.ovpn"

  rtorrent:
    image: quay.io/0xcaff/rtorrent:latest

    # Share the network stack of the vpn client container. When this container
    # binds ports, they can be reached through the "firewall" service.
    network_mode: service:firewall

    # When rtorrent isn't running in daemon mode, it needs standard input and a
    # tty for curses.
    stdin_open: true
    tty: true

    # SCGI is exposed on port 5000.

    volumes:
      - ./rtorrent/.rtorrent.rc:/rtorrent/.rtorrent.rc
      - /home/rtorrent/downloaded:/rtorrent/downloaded
      - /home/rtorrent/.rtorrent.session:/rtorrent/.rtorrent.session
      - ./wait-for/wait-for:/wait-for

    entrypoint: "/bin/sh"

    # Waits for the firewall to be set up before running rtorrent. The VPN may
    # or may not be ready but no traffic will be leaked because of the firewall.
    command: "/wait-for localhost:60000 -- rtorrent"

  flood:
    image: flood
    depends_on:
      - rtorrent
    restart: unless-stopped
    volumes:
      - flood:/data
    environment:
      FLOOD_BASE_URI: /
      RTORRENT_SCGI_HOST: firewall
      RTORRENT_SCGI_PORT: 5000
      # The virtual host used with jwilder/nginx-proxy.
      VIRTUAL_HOST: flood.*

    expose:
      - 3000

    networks:
      - local
      - ingress

volumes:
  flood:
    driver: local

networks:
  # A network for connecting flood to rtorrent (and the vpn service). This also
  # provides access to the internet for flood, rtorrent and the vpn. The vpn
  # container is responsible for firewalling traffic from rtorrent.
  local:

  # The network on which flood exposes itself on to be seen by
  # jwilder/nginx-proxy.
  ingress:
    external:
      name: ingress-nginx
